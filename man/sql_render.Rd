% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/sql_render.R
\name{sql_render}
\alias{sql_render}
\title{Render mustache-style SQL template}
\usage{
sql_render(sql, data = NULL, tags = getOption("sql.tags"),
  strip.comments = getOption("sql.strip.comments", TRUE), render = TRUE,
  ...)
}
\arguments{
\item{sql}{either a connection or character string;
see \code{\link{sql}} and \code{\link{sql_read}}}

\item{data}{environment, list or named vector. Locations to search for values
to substitute into the query. The default, \code{NULL} finds the names from
the call stack/search path.}

\item{tags}{character; list of tags to uncomment. See
\code{\link{sql_uncomment}}. The default, \code{NULL} does not perform any
uncommenting.}

\item{strip.comments}{logical; whether to strip comments from sql;
The Default is taken from the global option \code{sql.strip.comments} or else
it is \code{TRUE}}

\item{render}{logical; whether to make a template replacement using
\code{whisker.render} (DEFAULT:TRUE)}

\item{...}{aditional arguments supplied to \code{\link{sql_read}}}
}
\value{
sql; a SQL statement that can then be passed to a DATABASE
connection
}
\description{
Read SQL and substitute parameters, use tags to allow for programatic
functionality.
}
\details{
\code{sql_render} renders a SQL template by optionally uncommenting and/or
stripping comments followed by substituting template variables using whisker.
The process occurs in that order.

When set to \code{FALSE}, \code{render} will prevent rendering of the
template and pass-through the SQL unaltered. This is useful mainly for
debugging.
}
\note{
\code{sql_render} makes no attempt to determine if resulting SQL is valid SQL.
}
\section{Uncommenting}{


See \code{\link{sql_uncomment}},

\code{tags} are used to uncomment SQL comments using. The default is provided
by global option \code{sql.tags}. If unset or \code{NULL}, no uncommenting is
performed.  If an empty character string, \code{""}, is provided, all
comments are uncommented.
}

\section{Comment stripping}{


\code{strip.comments} controls the stripping of comments. It is performed by
\code{\link{sql_strip_comments}}. Since comment stripping occurs after
uncommenting, previously uncommented lines are not stripped from the SQL.
The default to strip comments since 1) most operations are believed to be
automatic in nature and 2) any unfound template variables result in a
warning courtesy of \code{whisker.tools}. Thus stripping comments means
warnings only occur only from evaluated SQL and not comments.
}

\section{Variable Substitution}{


SQL is rendered it using \code{\link[whisker]{whisker.render}} using the
values provided in \code{data} or the \code{parent.frame} by default.
\code{data} can be a list or environment that provides the values to be
substituted. If a varaible is not found, an warning is given.
}
\examples{
sql = "select * from {{table}}"
  table = "table1"
  sql_render( sql )

  table = "table_1"
  sql_render( sql )
  sql_render( "select * from {{table}} --r: where ROWNUM < 10 ")

  # with magrittr:
  \dontrun{
    sql \%>\% sql_render( c( table = "table4" ) )
  }
}
\seealso{
\code{\link{sql_read}} \cr
  \code{\link[whisker]{whisker.render}} \cr
}

